var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var jsonParser = bodyParser.json();

var Datastore = require('nedb')
  , db = new Datastore({ filename: __dirname+'/db/users.txt', autoload: true });

var Datastore = require('nedb')
  , token = new Datastore({ filename: __dirname+'/db/tokens.txt', autoload: true });



app.listen('3000', function(){
    console.log("server is running");
});

function makeid(length) {
    var result           = '';
    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for ( var i = 0; i < length; i++ ) {
      result += characters.charAt(Math.floor(Math.random() * 
 charactersLength));
   }
   return result;
}

app.post('/adminLogin', jsonParser, (req, res) =>{

    let email =req.body.email;
    let pass=req.body.pass;

    db.find({ Email: { $in: [email,pass] }}, function (err, docs) {
        console.log("hello",docs.length);
        if(docs.length == 0){
            res.status(400).json({"message" : "user doesnt exist "});
        } else {
            let tokens = makeid(10);
            token.insert({  Email: email,token:tokens }, function(err) { return });
        res.status(200).json(
                {
                    "message": "login is sucessfull",
                    "token":tokens

                });

        }
        return;
      });

      let uName= req.body.Password;

});

 

app.post('/createaccount', jsonParser, (req, res) => {

    let name = req.body.name;
    let uID = req.body.uID;
    let email = req.body.email;
    let pwd = req.body.pwd;
    let accType = req.body.accType;
    let uStatus = req.body.uStatus;

    db.find({ UserID: { $in: [uID] }}, function (err, docs) {
        console.log("hello",docs.length);
        if(docs.length == 0){
            db.insert({ UserID: uID , Name: name, Email: email, Password: pwd, AccountType: accType, UserStatus: uStatus
            }, function(err) { return });
            res.status(200).json({"message" : "user has been added"});
        } else {
            res.status(400).json({"message": "user already exists"});
        }
        return;
      });
    


    
});

app.post('/editaccount',jsonParser,(req, res) => {
   let user = req.body.UserID;
   let fname = req.body.fieldName;
   let fvalue = req.body.fieldValue;

   db.find({ UserID: { $in: [user] }}, function (err, docs) {
    // console.log("hello",docs[0]._id);
    let id = docs[0]._id;
    if(docs.length>0 && docs.length<=2)
    {
       
                switch(fname) {
                    case "Name":
                        db.update({ _id : id }, { $set: { "Name": fvalue } }, { multi: true }, function (err, numReplaced) {
                    
                            res.status(200).json({"message" : "name update sucessful"});
                          });
                      break;
                    case "email":
                        db.update({ _id: id }, { $set: { "Email": fvalue } }, { multi: true }, function (err, numReplaced) {
                    
                            res.status(200).json({"message" : "email update sucessful"});
                          });
                    case "password":
                        db.update({ _id: id }, { $set: { "Password": fvalue } }, { multi: true }, function (err, numReplaced) {
                    
                            res.status(200).json({"message" : "password update sucessful"});
                          });
                      break;
                    default:
                        res.status(400).json({"message" : "update fail"});
                  }
            }
            else{
                res.status(400).json({"message" : "update failed"});
            }

    
});
});
Simulation_start(staff_UserID, stud_UserID){

	if(staff_userID equals AccessType "staff"){
		Stage1_eggtocaterpillar(autoGeneratedsimulationId);
	}
	else{
		//access denied
	}
}

app.post('/simulation_start',jsonParser,(req, res) => {
    let staff_ID = req.body.staff_UserID;
    let stu_ID = req.body.stud_UserID;





